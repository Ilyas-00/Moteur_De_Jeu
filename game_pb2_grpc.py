# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import game_pb2 as game__pb2

GRPC_GENERATED_VERSION = '1.70.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in game_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class GameServiceStub(object):
    """Service de jeu
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetGameState = channel.unary_unary(
                '/game.GameService/GetGameState',
                request_serializer=game__pb2.GameRequest.SerializeToString,
                response_deserializer=game__pb2.GameState.FromString,
                _registered_method=True)
        self.ResetGame = channel.unary_unary(
                '/game.GameService/ResetGame',
                request_serializer=game__pb2.GameRequest.SerializeToString,
                response_deserializer=game__pb2.Empty.FromString,
                _registered_method=True)
        self.CreateGame = channel.unary_unary(
                '/game.GameService/CreateGame',
                request_serializer=game__pb2.CreateGameRequest.SerializeToString,
                response_deserializer=game__pb2.CreateGameResponse.FromString,
                _registered_method=True)
        self.CreatePlayer = channel.unary_unary(
                '/game.GameService/CreatePlayer',
                request_serializer=game__pb2.CreatePlayerRequest.SerializeToString,
                response_deserializer=game__pb2.Player.FromString,
                _registered_method=True)
        self.JoinGame = channel.unary_unary(
                '/game.GameService/JoinGame',
                request_serializer=game__pb2.JoinGameRequest.SerializeToString,
                response_deserializer=game__pb2.GameState.FromString,
                _registered_method=True)
        self.MovePlayer = channel.unary_unary(
                '/game.GameService/MovePlayer',
                request_serializer=game__pb2.MoveRequest.SerializeToString,
                response_deserializer=game__pb2.GameState.FromString,
                _registered_method=True)
        self.StartGame = channel.unary_unary(
                '/game.GameService/StartGame',
                request_serializer=game__pb2.GameRequest.SerializeToString,
                response_deserializer=game__pb2.GameState.FromString,
                _registered_method=True)
        self.EndTurn = channel.unary_unary(
                '/game.GameService/EndTurn',
                request_serializer=game__pb2.GameRequest.SerializeToString,
                response_deserializer=game__pb2.GameState.FromString,
                _registered_method=True)


class GameServiceServicer(object):
    """Service de jeu
    """

    def GetGameState(self, request, context):
        """Obtenir l'état du jeu
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ResetGame(self, request, context):
        """Réinitialiser le jeu
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateGame(self, request, context):
        """Créer un nouveau jeu
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreatePlayer(self, request, context):
        """Créer un joueur
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def JoinGame(self, request, context):
        """Rejoindre un jeu
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MovePlayer(self, request, context):
        """Déplacer un joueur
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StartGame(self, request, context):
        """Démarrer le jeu
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EndTurn(self, request, context):
        """Terminer le tour
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_GameServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetGameState': grpc.unary_unary_rpc_method_handler(
                    servicer.GetGameState,
                    request_deserializer=game__pb2.GameRequest.FromString,
                    response_serializer=game__pb2.GameState.SerializeToString,
            ),
            'ResetGame': grpc.unary_unary_rpc_method_handler(
                    servicer.ResetGame,
                    request_deserializer=game__pb2.GameRequest.FromString,
                    response_serializer=game__pb2.Empty.SerializeToString,
            ),
            'CreateGame': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateGame,
                    request_deserializer=game__pb2.CreateGameRequest.FromString,
                    response_serializer=game__pb2.CreateGameResponse.SerializeToString,
            ),
            'CreatePlayer': grpc.unary_unary_rpc_method_handler(
                    servicer.CreatePlayer,
                    request_deserializer=game__pb2.CreatePlayerRequest.FromString,
                    response_serializer=game__pb2.Player.SerializeToString,
            ),
            'JoinGame': grpc.unary_unary_rpc_method_handler(
                    servicer.JoinGame,
                    request_deserializer=game__pb2.JoinGameRequest.FromString,
                    response_serializer=game__pb2.GameState.SerializeToString,
            ),
            'MovePlayer': grpc.unary_unary_rpc_method_handler(
                    servicer.MovePlayer,
                    request_deserializer=game__pb2.MoveRequest.FromString,
                    response_serializer=game__pb2.GameState.SerializeToString,
            ),
            'StartGame': grpc.unary_unary_rpc_method_handler(
                    servicer.StartGame,
                    request_deserializer=game__pb2.GameRequest.FromString,
                    response_serializer=game__pb2.GameState.SerializeToString,
            ),
            'EndTurn': grpc.unary_unary_rpc_method_handler(
                    servicer.EndTurn,
                    request_deserializer=game__pb2.GameRequest.FromString,
                    response_serializer=game__pb2.GameState.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'game.GameService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('game.GameService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class GameService(object):
    """Service de jeu
    """

    @staticmethod
    def GetGameState(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/game.GameService/GetGameState',
            game__pb2.GameRequest.SerializeToString,
            game__pb2.GameState.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ResetGame(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/game.GameService/ResetGame',
            game__pb2.GameRequest.SerializeToString,
            game__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateGame(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/game.GameService/CreateGame',
            game__pb2.CreateGameRequest.SerializeToString,
            game__pb2.CreateGameResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreatePlayer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/game.GameService/CreatePlayer',
            game__pb2.CreatePlayerRequest.SerializeToString,
            game__pb2.Player.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def JoinGame(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/game.GameService/JoinGame',
            game__pb2.JoinGameRequest.SerializeToString,
            game__pb2.GameState.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def MovePlayer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/game.GameService/MovePlayer',
            game__pb2.MoveRequest.SerializeToString,
            game__pb2.GameState.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StartGame(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/game.GameService/StartGame',
            game__pb2.GameRequest.SerializeToString,
            game__pb2.GameState.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def EndTurn(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/game.GameService/EndTurn',
            game__pb2.GameRequest.SerializeToString,
            game__pb2.GameState.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
